# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import dbaccess
import point_calculate
import os
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1007, 401)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setObjectName("label1")
        self.verticalLayout.addWidget(self.label1)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.label2.setFont(font)
        self.label2.setObjectName("label2")
        self.horizontalLayout.addWidget(self.label2)
        self.line1 = QtWidgets.QLineEdit(self.centralwidget)
        self.line1.setReadOnly(True)
        self.line1.setObjectName("line1")
        self.horizontalLayout.addWidget(self.line1)
        self.label3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.label3.setFont(font)
        self.label3.setObjectName("label3")
        self.horizontalLayout.addWidget(self.label3)
        self.line2 = QtWidgets.QLineEdit(self.centralwidget)
        self.line2.setReadOnly(True)
        self.line2.setObjectName("line2")
        self.horizontalLayout.addWidget(self.line2)
        self.label4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.label4.setFont(font)
        self.label4.setObjectName("label4")
        self.horizontalLayout.addWidget(self.label4)
        self.line3 = QtWidgets.QLineEdit(self.centralwidget)
        self.line3.setReadOnly(True)
        self.line3.setObjectName("line3")
        self.horizontalLayout.addWidget(self.line3)
        self.label5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.label5.setFont(font)
        self.label5.setObjectName("label5")
        self.horizontalLayout.addWidget(self.label5)
        self.line4 = QtWidgets.QLineEdit(self.centralwidget)
        self.line4.setReadOnly(True)
        self.line4.setObjectName("line4")
        self.horizontalLayout.addWidget(self.line4)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout_5.addLayout(self.verticalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label6 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.label6.setFont(font)
        self.label6.setObjectName("label6")
        self.horizontalLayout_5.addWidget(self.label6)
        self.line5 = QtWidgets.QLineEdit(self.centralwidget)
        self.line5.setReadOnly(True)
        self.line5.setObjectName("line5")
        self.horizontalLayout_5.addWidget(self.line5)
        self.verticalLayout_4.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.radio1 = QtWidgets.QRadioButton(self.centralwidget)
        self.radio1.setObjectName("radio1")
       
        self.radio1.toggled.connect(self.category_select)
        
        self.horizontalLayout_3.addWidget(self.radio1)
        self.radio2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radio2.setObjectName("radio2")
        
        self.radio2.toggled.connect(self.category_select)
        
        self.horizontalLayout_3.addWidget(self.radio2)
        self.radio3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radio3.setObjectName("radio3")
        
        self.radio3.toggled.connect(self.category_select)
        
        self.horizontalLayout_3.addWidget(self.radio3)
        self.radio4 = QtWidgets.QRadioButton(self.centralwidget)
        self.radio4.setObjectName("radio4")
        
        self.radio4.toggled.connect(self.category_select)
        
        self.horizontalLayout_3.addWidget(self.radio4)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.listWidget1 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget1.setObjectName("listWidget1")  
        
        self.listWidget1.itemDoubleClicked.connect(self.add_list2)
        
        self.verticalLayout_4.addWidget(self.listWidget1)
        self.horizontalLayout_2.addLayout(self.verticalLayout_4)
        self.label9 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.label9.setFont(font)
        self.label9.setObjectName("label9")
        self.horizontalLayout_2.addWidget(self.label9)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label7 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.label7.setFont(font)
        self.label7.setObjectName("label7")
        self.horizontalLayout_6.addWidget(self.label7)
        self.line6 = QtWidgets.QLineEdit(self.centralwidget)
        self.line6.setReadOnly(True)
        self.line6.setObjectName("line6")
        self.horizontalLayout_6.addWidget(self.line6)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label8 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.label8.setFont(font)
        self.label8.setObjectName("label8")
        self.horizontalLayout_4.addWidget(self.label8)
        self.line7 = QtWidgets.QLineEdit(self.centralwidget)
        self.line7.setObjectName("line7")
        self.horizontalLayout_4.addWidget(self.line7)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.listWidget2 = QtWidgets.QListWidget(self.centralwidget)
        self.listWidget2.setObjectName("listWidget2")
        
        self.listWidget2.itemDoubleClicked.connect(self.remove_list2)
        
        self.verticalLayout_2.addWidget(self.listWidget2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout_5.addLayout(self.horizontalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1007, 26))
        self.menubar.setObjectName("menubar")
        self.menu1 = QtWidgets.QMenu(self.menubar)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        self.menu1.setFont(font)
        self.menu1.setObjectName("menu1")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action1 = QtWidgets.QAction(MainWindow)
        self.action1.setObjectName("action1")
        self.action2 = QtWidgets.QAction(MainWindow)
        self.action2.setObjectName("action2")
        self.action3 = QtWidgets.QAction(MainWindow)
        self.action3.setObjectName("action3")
        self.action4 = QtWidgets.QAction(MainWindow)
        self.action4.setObjectName("action4")
        self.menu1.addAction(self.action1)
        self.menu1.addSeparator()
        self.menu1.addAction(self.action2)
        self.menu1.addSeparator()
        self.menu1.addAction(self.action3)
        self.menu1.addSeparator()
        self.menu1.addAction(self.action4)
        self.menubar.addAction(self.menu1.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        self.menu1.triggered[QtWidgets.QAction].connect(self.menufunction)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket"))
        self.label1.setText(_translate("MainWindow", "Your Selections"))
        self.label2.setText(_translate("MainWindow", "Batsmen(BAT)"))
        self.label3.setText(_translate("MainWindow", "Bowlers(BOW)"))
        self.label4.setText(_translate("MainWindow", "Allrounders(AR)"))
        self.label5.setText(_translate("MainWindow", "Wicket-keeper(WK)"))
        self.label6.setText(_translate("MainWindow", "Points Available"))
        self.radio1.setText(_translate("MainWindow", "BAT"))
        self.radio2.setText(_translate("MainWindow", "BOW"))
        self.radio3.setText(_translate("MainWindow", "AR"))
        self.radio4.setText(_translate("MainWindow", "WK"))
        self.label9.setText(_translate("MainWindow", "    >    "))
        self.label7.setText(_translate("MainWindow", "Points Used"))
        self.label8.setText(_translate("MainWindow", "Team Name"))
        self.menu1.setTitle(_translate("MainWindow", "Manage Teams"))
        self.action1.setText(_translate("MainWindow", "NEW Team"))
        self.action2.setText(_translate("MainWindow", "OPEN Team"))
        self.action3.setText(_translate("MainWindow", "SAVE Team"))
        self.action4.setText(_translate("MainWindow", "EVALUATE Team"))
    
    list1=[]
    list2=[]
    list3=[]
    selected_names=[]
    selected_cat=[]
    selected_points=[]

    #------------------controls menu options-------------------------
    def menufunction(self, action):
        action_text=action.text()

        if action_text=='NEW Team':
            self.stat_data=dbaccess.read_data('SELECT * FROM stats;')
            self.list1=[x[0] for x in self.stat_data]
            self.list2=[x[6] for x in self.stat_data]
            self.match_data=dbaccess.read_data('SELECT * FROM match;')
            self.list3=[point_calculate.calc_point(x) for x in self.match_data]
            #print(self.list1, self.list2, self.list3)
            self.add_list1()
            self.line1.setText('0')
            self.line2.setText('0')
            self.line3.setText('0')
            self.line4.setText('0')
            self.line5.setText('1000')
            self.line6.setText('0')

        elif action_text=='SAVE Team':
            if self.rule_check4()!=True:
                self.call_widget('error4_gui')
            elif self.line7.text()=='':
                self.call_widget('error5_gui')
            else:
                confirm=dbaccess.write_data(self.line7.text(), self.selected_names, self.selected_points)
                if confirm==1:
                    self.call_widget('success_gui')
                elif confirm==2:
                    self.call_widget('error6_gui')
                else:
                    self.call_widget('error7_gui')

        elif action_text=='EVALUATE Team':
            self.call_widget('evaluate_gui')
                
    #-------------calling widgets------------------------------------       
    def call_widget(self, file_name):
        try:
            file_path=self.give_filepath(file_name)
            os.system('python {}'.format(file_path))    
        except:
            print("Unknown error")
    
    #-------------returns path on the python widget file----------------
    def give_filepath(self, file):
        path=__file__.replace('main_gui.py', '{}.py'.format(file))
        return path
    
    #----------checking rule: Team cannot have more than one wicket keeper-------------
    def rule_check1(self, item):
        if (self.selected_cat.count('WK')!=0 and self.list2[self.list1.index(item)]=='WK'):
            self.call_widget('error1_gui')
            return False
        else:
            return True
     
    #----------checking rule: Team cannot have more than 11 players--------------------- 
    def rule_check2(self):
        if len(self.selected_names)==11:
            self.call_widget('error2_gui')
            return False
        else:
            return True
    
    #----------checking rule: points used cannot be greater than 1000------------------- 
    def rule_check3(self, item):
        if int(self.line6.text())+self.list3[self.list1.index(item)]>1000:
            self.call_widget('error3_gui')
            return False
        else:
            return True
    
    #----------checking rule: Team must have 11 players----------------- 
    def rule_check4(self):
        if len(self.selected_names)!=11:
            self.call_widget('error4_gui')
            return False
        else:
            return True
    
    #--------------------------loads list1 with palyer name------------------------           
    def add_list1(self, cat=None):
        if cat==None:
            for name in self.list1:
                self.listWidget1.addItem(name)
        else:
            for i in range(len(self.list2)):
                if self.list2[i]==cat:
                    self.listWidget1.addItem(self.list1[i])
    
    #--------counts the number of batsmen, bouwlers, wicket-keepers, allrounders selected and also the points available and points used-------------
    def update_counts(self):
        self.line1.setText(str(self.selected_cat.count('BAT')))
        self.line2.setText(str(self.selected_cat.count('BWL')))
        self.line3.setText(str(self.selected_cat.count('AR')))
        self.line4.setText(str(self.selected_cat.count('WK')))
        self.line6.setText(str(sum(self.selected_points)))
        self.line5.setText(str(1000-int(self.line6.text())))
        
    #--------------------displays player name according to their categories--------------------
    def category_select(self):
        self.listWidget1.clear()
        if self.radio1.isChecked():
            self.add_list1('BAT')
        elif self.radio2.isChecked():
            self.add_list1('BWL')
        elif self.radio3.isChecked():
            self.add_list1('AR')
        elif self.radio4.isChecked():
            self.add_list1('WK')
    
    #-------------displays selected players in list 2--------------------------------
    def add_list2(self, item):
        player_name=item.text()
        if self.rule_check1(player_name)==True and self.rule_check2()==True and self.rule_check3(player_name)==True:
            self.listWidget1.takeItem(self.listWidget1.row(item))
            self.listWidget2.addItem(item)
            self.selected_names.append(player_name)
            self.selected_cat.append(self.list2[self.list1.index(player_name)])
            self.selected_points.append(self.list3[self.list1.index(player_name)])
            self.list3.pop(self.list1.index(player_name))
            self.list2.pop(self.list1.index(player_name))
            self.list1.pop(self.list1.index(player_name))
            self.update_counts()
    
    #------------------removes the selected players from list 2--------------------------
    def remove_list2(self, item):
        player_name=item.text()
        self.listWidget2.takeItem(self.listWidget2.row(item))
        self.listWidget1.addItem(item)
        self.list1.append(player_name)
        self.list2.append(self.selected_cat[self.selected_names.index(player_name)])
        self.list3.append(self.selected_points[self.selected_names.index(player_name)])
        self.selected_points.pop(self.selected_names.index(player_name))
        self.selected_cat.pop(self.selected_names.index(player_name))
        self.selected_names.pop(self.selected_names.index(player_name))
        self.update_counts()
        


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
